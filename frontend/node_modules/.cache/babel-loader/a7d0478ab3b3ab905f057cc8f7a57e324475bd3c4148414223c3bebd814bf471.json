{"ast":null,"code":"import { csrfFetch } from \"./csrf\";\nexport const GET_ALLSPOTSREVIEWS = 'reviews/GET_ALLSPOTSREVIEWS';\nexport const POST_ONEREVIEW = 'reviews/POST_ONEREVIEW';\nexport const DELETE_ONEREVIEW = 'reviews/DELETE_ONEREVIEW';\nexport const allSpotsReviewsAction = reviews => ({\n  type: GET_ALLSPOTSREVIEWS,\n  reviews\n});\nexport const createReviewAction = review => ({\n  type: POST_ONEREVIEW,\n  review\n});\nexport const deleteOneReviewAction = reviewId => ({\n  type: DELETE_ONEREVIEW,\n  reviewId\n});\nexport const getSpotsReviewsThunk = spotId => async dispatch => {\n  const response = await fetch(`/api/spots/${spotId}/reviews`);\n  if (response.ok) {\n    const newReview = await response.json();\n    dispatch(allSpotsReviewsAction(newReview));\n  }\n};\nexport const deleteOneReviewThunk = reviewId => async dispatch => {\n  const response = await csrfFetch(`/api/reviews/${reviewId}`, {\n    method: 'DELETE'\n  });\n  if (response.ok) {\n    const deleteReview = await response.json();\n    dispatch(deleteOneReviewAction(reviewId));\n  }\n};\nexport const createReviewThunk = (reviewData, spotId) => async dispatch => {\n  let response = await csrfFetch(`/api/spots/${spotId}/reviews`, {\n    method: \"POST\",\n    body: JSON.stringify(reviewData)\n  });\n  if (response.ok) {\n    const reviewCreated = response.json();\n    dispatch(createReviewAction(reviewCreated));\n  }\n};\nconst initialState = {};\n// export const deleteReviewThunk = (reviewId) => async dispatch =>\n// const initialState = {\n\n// }\nconst reviewsReducer = function () {\n  var _action$reviews, _action$reviews$Revie;\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  let newReviewsState;\n  switch (action.type) {\n    case GET_ALLSPOTSREVIEWS:\n      newReviewsState = {};\n      (_action$reviews = action.reviews) === null || _action$reviews === void 0 ? void 0 : (_action$reviews$Revie = _action$reviews.Reviews) === null || _action$reviews$Revie === void 0 ? void 0 : _action$reviews$Revie.forEach(review => {\n        newReviewsState[review.id] = review;\n      });\n      return newReviewsState;\n    case DELETE_ONEREVIEW:\n      newReviewsState = {\n        ...state\n      };\n      delete newReviewsState[action.reviewId];\n      return newReviewsState;\n    case POST_ONEREVIEW:\n      newReviewsState = {\n        ...state\n      };\n      newReviewsState[action.review.id] = action.review;\n      return newReviewsState;\n    default:\n      return state;\n  }\n};\nexport default reviewsReducer;","map":{"version":3,"names":["csrfFetch","GET_ALLSPOTSREVIEWS","POST_ONEREVIEW","DELETE_ONEREVIEW","allSpotsReviewsAction","reviews","type","createReviewAction","review","deleteOneReviewAction","reviewId","getSpotsReviewsThunk","spotId","dispatch","response","fetch","ok","newReview","json","deleteOneReviewThunk","method","deleteReview","createReviewThunk","reviewData","body","JSON","stringify","reviewCreated","initialState","reviewsReducer","state","action","newReviewsState","Reviews","forEach","id"],"sources":["/Users/kishaonia/Documents/GitHub/SNOWLFB/frontend/src/store/reviews.js"],"sourcesContent":["import { csrfFetch } from \"./csrf\";\n\nexport const GET_ALLSPOTSREVIEWS = 'reviews/GET_ALLSPOTSREVIEWS'\nexport const POST_ONEREVIEW = 'reviews/POST_ONEREVIEW'\nexport const DELETE_ONEREVIEW = 'reviews/DELETE_ONEREVIEW'\n\nexport const allSpotsReviewsAction = reviews => ({\n    type: GET_ALLSPOTSREVIEWS,\n    reviews\n})\n\nexport const createReviewAction = review => ({\n    type: POST_ONEREVIEW,\n    review\n})\n\nexport const deleteOneReviewAction = reviewId => ({\n    type: DELETE_ONEREVIEW,\n    reviewId\n})\n\n\nexport const getSpotsReviewsThunk = (spotId) => async dispatch => {\n    const response = await fetch(`/api/spots/${spotId}/reviews`)\n    if (response.ok) {\n        const newReview = await response.json();\n        dispatch(allSpotsReviewsAction(newReview))\n    }\n}\nexport const deleteOneReviewThunk = (reviewId) => async dispatch => {\n    const response = await csrfFetch(`/api/reviews/${reviewId}`, {\n        method: 'DELETE',\n    });\n    if (response.ok) {\n        const deleteReview = await response.json();\n        dispatch(deleteOneReviewAction(reviewId))\n    }\n}\nexport const createReviewThunk = (reviewData, spotId) => async dispatch => {\n    let response = await csrfFetch(`/api/spots/${spotId}/reviews`, {\n        method: \"POST\",\n        body: JSON.stringify(reviewData)\n    })\n\n    if (response.ok) {\n        const reviewCreated = response.json()\n        dispatch(createReviewAction(reviewCreated))\n   \n    }\n   \n}\n\nconst initialState = {\n\n}\n// export const deleteReviewThunk = (reviewId) => async dispatch =>\n// const initialState = {\n\n// }\nconst reviewsReducer = (state= initialState, action) => {\nlet newReviewsState;\nswitch(action.type) {\ncase GET_ALLSPOTSREVIEWS:\n    newReviewsState={};\n    action.reviews?.Reviews?.forEach(review => {\n        newReviewsState[review.id] = review\n    })\n    return newReviewsState;\ncase DELETE_ONEREVIEW:\n    newReviewsState={...state}\n    delete newReviewsState[action.reviewId]\n    return newReviewsState\ncase POST_ONEREVIEW:\n    newReviewsState={...state};\n    newReviewsState[action.review.id] = action.review\n    return newReviewsState\ndefault: return state\n}\n}\n\nexport default reviewsReducer"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}