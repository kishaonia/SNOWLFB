{"ast":null,"code":"import { csrfFetch } from \"./csrf\";\nconst GET_ALLSPOTS = \"spots/GET_AllSPOTS\";\nconst GET_ONESPOT = \"spots/GET_ONESPOT\";\nconst GET_CURRENTUSERSPOTS = \"spots/GET_CURRENTUSERSPOTS\";\nconst POST_ONESPOT = \"spots/POST_ONESPOT\";\nconst PUT_ONESPOT = \"spots/PUT_ONESPOT\";\nconst DELETE_ONESPOT = \"spots/DELETE_ONESPOT\";\nexport const getAllSpotsAction = spots => ({\n  type: GET_ALLSPOTS,\n  spots\n});\nexport const getCurrentUserSpotsAction = spots => ({\n  type: GET_CURRENTUSERSPOTS,\n  spots\n});\nexport const getOneSpot = spot => ({\n  type: GET_ONESPOT,\n  spot\n});\nexport const deleteSpotAction = spotId => ({\n  type: DELETE_ONESPOT,\n  spotId\n});\nexport const createSpotAction = spot => ({\n  type: POST_ONESPOT,\n  spot\n});\nexport const editSpotAction = spot => ({\n  type: PUT_ONESPOT,\n  spot\n});\nexport const getAllSpotsThunk = () => async dispatch => {\n  const res = await fetch('/api/spots');\n  console.log('Res', res);\n  if (res.ok) {\n    const spots = await res.json();\n    console.log('getSpots', spots);\n    dispatch(getAllSpotsAction(spots));\n  }\n};\nexport const getCurrentUserSpotsThunk = () => async dispatch => {\n  const res = await csrfFetch('/api/spots/current');\n  if (res.ok) {\n    const currentSpots = await res.json();\n    dispatch(getCurrentUserSpotsAction(currentSpots));\n  }\n};\nexport const getOneSpotThunk = spotId => async dispatch => {\n  const res = await fetch(`/api/spots/${spotId}`);\n  // console.log('get one spot', res)\n  if (res.ok) {\n    const details = await res.json();\n    dispatch(getOneSpot(details));\n  }\n};\nexport const deleteOneSpotThunk = spotId => async dispatch => {\n  const response = await csrfFetch(`/api/spots/${spotId}`, {\n    method: \"DELETE\"\n  });\n  if (response.ok) {\n    // const deleteSpot = await response.json()\n    dispatch(deleteSpotAction(spotId));\n  }\n};\nexport const editSpotThunk = (spot, spotId) => async dispatch => {\n  const response = await csrfFetch(`/api/spots/${spotId}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(spot)\n  });\n  if (response.ok) {\n    const editSpotThunk = await response.json();\n    await dispatch(editSpotAction(editSpotThunk));\n  }\n  return editSpotThunk;\n};\n// export const createOneSpotThunk = (spot, images) => async dispatch => {\n// const res = await csrfFetch('/api/spots', {\n//     method: 'POST',\n//     headers: {'Content-Type': 'application'}, \n//     body: JSON.stringify(spot)\n\n// })\n// const spotOne = await res.json()\n// if (spotOne) {\n//     const res2 = await csrfFetch('/api/spots/${spotOne.id}/images', {\n//         method: 'POST',\n//         body: JSON.stringify(images)\n//     })\n//    const imageCreated = res2.json()\n//    dispatch(createSpotAction(spotOne, imageCreated))\n// }\n// return spotOne\n// }\nexport const createOneSpotThunk = (spot, images) => async dispatch => {\n  // const {address, city, state, lat, lng, country, name, description, price} = spot\n  const res = await csrfFetch('/api/spots', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    // body: JSON.stringify({address, city, state, lat, lng, country, name, description, price})\n    body: JSON.stringify(spot)\n  });\n  console.log('Response Create Spot', res);\n  const spotCreated = await res.json();\n  spotCreated['SpotImages'] = [];\n  if (res.ok) {\n    // spotCreated['SpotImages'] = []\n    //by looking at back end found out that need to assign spot images as an empty array to make it dynamic\n    for (let i = 0; i < images.length; i++) {\n      const res2 = await csrfFetch(`/api/spots/${spotCreated.id}/images`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(images[i])\n      });\n      const image = await res2.json();\n      console.log('images-array', image);\n      if (res2.ok) {\n        spotCreated.SpotImages.push(image);\n      }\n      // dispatch(createSpotAction(spotCreated))\n    }\n    // return spotCreated\n    dispatch(createSpotAction(spotCreated));\n    return spotCreated;\n  }\n  // dispatch(createSpotAction(spotCreated))\n  // return spotCreated\n};\n\nconst initialState = {};\n\n//const initialState = {\n//spots={}\n//spot={}\n// }\n\nconst spotsReducer = function () {\n  var _action$spots, _action$spots$Spots;\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  let newSpotsState;\n  switch (action.type) {\n    // case GET_ALLSPOTS:\n    //action.spots.Spots.forEach((spot) => (newSpotsState))\n    //newSPotsState = {...state, spots:{...state.spots}}\n    //return newSpotsState\n    case GET_ALLSPOTS:\n      newSpotsState = {};\n      action.spots.Spots.forEach(spot => {\n        newSpotsState[spot.id] = spot;\n      });\n      // console.log('new state', newSpotsState)\n      return newSpotsState;\n    case GET_CURRENTUSERSPOTS:\n      newSpotsState = {};\n      action === null || action === void 0 ? void 0 : (_action$spots = action.spots) === null || _action$spots === void 0 ? void 0 : (_action$spots$Spots = _action$spots.Spots) === null || _action$spots$Spots === void 0 ? void 0 : _action$spots$Spots.forEach(spot => {\n        newSpotsState[spot.id] = spot;\n      });\n      //console.log('new state 3', newSpotsState)\n      return newSpotsState;\n    // case GET_ONESPOT:\n    // newSpotsState = {...state, spot: {...state.spot} }\n    //newSpotsState.spot = action.spot\n    //return newSpotsState\n    case GET_ONESPOT:\n      newSpotsState = {\n        ...state\n      };\n      newSpotsState[action.spot.id] = action.spot;\n      return newSpotsState;\n    // console.log('new state 2', newSpotsState)\n    case POST_ONESPOT:\n      newSpotsState = {\n        ...state\n      };\n      newSpotsState[action.spot.id] = action.spot;\n      return newSpotsState;\n    case PUT_ONESPOT:\n      newSpotsState = {\n        ...state\n      };\n      newSpotsState[action.spot.id] = action.spot;\n      return newSpotsState;\n    case DELETE_ONESPOT:\n      newSpotsState = {\n        ...state\n      };\n      delete newSpotsState[action.spotId];\n      return newSpotsState;\n    default:\n      return state;\n  }\n};\nexport default spotsReducer;","map":{"version":3,"names":["csrfFetch","GET_ALLSPOTS","GET_ONESPOT","GET_CURRENTUSERSPOTS","POST_ONESPOT","PUT_ONESPOT","DELETE_ONESPOT","getAllSpotsAction","spots","type","getCurrentUserSpotsAction","getOneSpot","spot","deleteSpotAction","spotId","createSpotAction","editSpotAction","getAllSpotsThunk","dispatch","res","fetch","console","log","ok","json","getCurrentUserSpotsThunk","currentSpots","getOneSpotThunk","details","deleteOneSpotThunk","response","method","editSpotThunk","headers","body","JSON","stringify","createOneSpotThunk","images","spotCreated","i","length","res2","id","image","SpotImages","push","initialState","spotsReducer","state","action","newSpotsState","Spots","forEach"],"sources":["/Users/kishaonia/Documents/GitHub/SNOWLFB/frontend/src/store/spots.js"],"sourcesContent":["import { csrfFetch } from \"./csrf\";\n\nconst GET_ALLSPOTS = \"spots/GET_AllSPOTS\"\nconst GET_ONESPOT = \"spots/GET_ONESPOT\"\nconst GET_CURRENTUSERSPOTS = \"spots/GET_CURRENTUSERSPOTS\"\nconst POST_ONESPOT = \"spots/POST_ONESPOT\"\nconst PUT_ONESPOT = \"spots/PUT_ONESPOT\"\nconst DELETE_ONESPOT = \"spots/DELETE_ONESPOT\"\n\nexport const getAllSpotsAction = (spots) => ({\n    type: GET_ALLSPOTS,\n    spots\n});\n\nexport const getCurrentUserSpotsAction = (spots) => ({\n    type: GET_CURRENTUSERSPOTS,\n    spots\n})\n\nexport const getOneSpot = (spot) => ({\n    type: GET_ONESPOT,\n    spot\n    \n});\n\nexport const deleteSpotAction = (spotId) => ({\n    type:DELETE_ONESPOT,\n    spotId\n})\n\nexport const createSpotAction = (spot) => ({\n    type: POST_ONESPOT,\n    spot\n})\n\nexport const editSpotAction = (spot) => ({\n    type: PUT_ONESPOT,\n    spot\n})\n\nexport const getAllSpotsThunk = () => async dispatch => {\n    const res = await fetch('/api/spots')\n    console.log('Res', res)\n    if (res.ok) {\n        const spots = await res.json()\n        console.log('getSpots', spots)\n        dispatch(getAllSpotsAction(spots))\n    }\n};\n\nexport const getCurrentUserSpotsThunk = () => async dispatch => {\n    const res = await csrfFetch('/api/spots/current')\n    if (res.ok) {\n        const currentSpots = await res.json();\n        dispatch(getCurrentUserSpotsAction(currentSpots))\n    }\n}\n\nexport const getOneSpotThunk = (spotId) => async dispatch => {\n    const res = await fetch(`/api/spots/${spotId}`);\n    // console.log('get one spot', res)\n    if (res.ok) {\n        const details = await res.json();\n        dispatch(getOneSpot(details))\n    }\n}\n\nexport const deleteOneSpotThunk = (spotId) => async dispatch => {\nconst response = await csrfFetch(`/api/spots/${spotId}`, {\n    method: \"DELETE\"\n})\nif (response.ok) {\n    // const deleteSpot = await response.json()\n    dispatch(deleteSpotAction(spotId))\n}\n}\n\nexport const editSpotThunk = (spot, spotId) => async dispatch => {\n    const response = await csrfFetch(`/api/spots/${spotId}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(spot)\n    })\n    if (response.ok) {\n       const editSpotThunk = await response.json()\n        await dispatch(editSpotAction(editSpotThunk))\n    }   \n    return editSpotThunk\n\n}\n// export const createOneSpotThunk = (spot, images) => async dispatch => {\n// const res = await csrfFetch('/api/spots', {\n//     method: 'POST',\n//     headers: {'Content-Type': 'application'}, \n//     body: JSON.stringify(spot)\n    \n// })\n// const spotOne = await res.json()\n// if (spotOne) {\n//     const res2 = await csrfFetch('/api/spots/${spotOne.id}/images', {\n//         method: 'POST',\n//         body: JSON.stringify(images)\n//     })\n//    const imageCreated = res2.json()\n//    dispatch(createSpotAction(spotOne, imageCreated))\n// }\n// return spotOne\n// }\nexport const createOneSpotThunk = (spot, images) => async dispatch => {\n    // const {address, city, state, lat, lng, country, name, description, price} = spot\n    const res = await csrfFetch('/api/spots', {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        // body: JSON.stringify({address, city, state, lat, lng, country, name, description, price})\n        body: JSON.stringify(spot)\n       \n\n    })\n    console.log('Response Create Spot', res)\n    const spotCreated = await res.json()\n    spotCreated['SpotImages'] = []\n    if (res.ok) {\n        // spotCreated['SpotImages'] = []\n     //by looking at back end found out that need to assign spot images as an empty array to make it dynamic\n    for (let i = 0; i < images.length; i++) {\n        const res2 = await csrfFetch(`/api/spots/${spotCreated.id}/images`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(images[i])\n        });\n        const image = await res2.json()\n        console.log('images-array', image)\n        if (res2.ok) {\n            spotCreated.SpotImages.push(image)\n        }\n        // dispatch(createSpotAction(spotCreated))\n    }\n    // return spotCreated\n        dispatch(createSpotAction(spotCreated))\n        return spotCreated\n    }\n    // dispatch(createSpotAction(spotCreated))\n    // return spotCreated\n}\n\nconst initialState = {\n\n}\n\n//const initialState = {\n   //spots={}\n   //spot={}\n// }\n\nconst spotsReducer = (state = initialState, action) => {\n    let newSpotsState;\n    switch(action.type) {\n        // case GET_ALLSPOTS:\n            //action.spots.Spots.forEach((spot) => (newSpotsState))\n            //newSPotsState = {...state, spots:{...state.spots}}\n            //return newSpotsState\n        case GET_ALLSPOTS:\n            newSpotsState = {};\n            action.spots.Spots.forEach(spot => {\n                newSpotsState[spot.id] = spot\n            })\n            // console.log('new state', newSpotsState)\n            return newSpotsState;\n        case GET_CURRENTUSERSPOTS:\n            newSpotsState = {};\n            action?.spots?.Spots?.forEach(spot => {\n             newSpotsState[spot.id] = spot  \n            })\n            //console.log('new state 3', newSpotsState)\n            return newSpotsState\n        // case GET_ONESPOT:\n        // newSpotsState = {...state, spot: {...state.spot} }\n        //newSpotsState.spot = action.spot\n        //return newSpotsState\n        case GET_ONESPOT:\n            newSpotsState = {...state};\n            newSpotsState[action.spot.id] = action.spot;\n            return newSpotsState\n            // console.log('new state 2', newSpotsState)\n        case POST_ONESPOT:\n            newSpotsState = { ...state };\n            newSpotsState[action.spot.id] = action.spot;\n            return newSpotsState;\n        case PUT_ONESPOT:\n            newSpotsState = {...state};\n            newSpotsState[action.spot.id] = action.spot\n            return newSpotsState\n        case DELETE_ONESPOT:\n            newSpotsState = {...state};\n          delete  newSpotsState[action.spotId]\n          return newSpotsState\n        default:\n            return state\n    }\n}\n\nexport default spotsReducer"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}